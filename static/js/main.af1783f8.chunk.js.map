{"version":3,"sources":["tabs/tab.js","utils/debounce.js","tabs/underline.js","tabs/tabs.js","App.js","serviceWorker.js","index.js"],"names":["Tab","React","forwardRef","ref","active","item","animating","startAnimating","className","key","route","to","onClick","name","propTypes","PropTypes","shape","string","isRequired","bool","func","debounce","wait","immediate","timeout","context","this","args","arguments","later","apply","callNow","clearTimeout","setTimeout","Underline","refs","activeRoute","finishAnimating","useState","x","width","setAttributes","updateAttributes","useCallback","current","offsetLeft","getBoundingClientRect","useEffect","recalculateAttrs","window","addEventListener","removeEventListener","div","animate","style","opacity","onAnimationComplete","defaultProps","activeTabRef","undefined","Tabs","items","setAnimating","tabRefs","reduce","acc","createRef","location","useLocation","find","matchPath","pathname","path","exact","Fragment","role","aria-orientation","map","exitBeforeEnter","render","initial","exit","App","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af1783f8.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst Tab = React.forwardRef(\n  ({ active, item, animating, startAnimating }, ref) => (\n    <li className=\"tabs-list__item\" key={`tab-${item.route}`}>\n      <Link\n        to={item.route}\n        className={`tabs-list__tab ${active ? 'active' : 'inactive'} ${animating ? 'animating' : ''}`}\n        ref={ref}\n        onClick={startAnimating}\n      >\n        {item.name}\n      </Link>\n    </li>\n  ),\n);\n\nTab.propTypes = {\n  item: PropTypes.shape({\n    name: PropTypes.string,\n    route: PropTypes.string,\n  }).isRequired,\n  active: PropTypes.bool.isRequired,\n  animating: PropTypes.bool.isRequired,\n  startAnimating: PropTypes.func.isRequired,\n};\n\nexport default Tab;\n","const debounce = (func, wait, immediate) => {\n\tvar timeout;\n\treturn function() {\n\t\tvar context = this, args = arguments;\n\t\tvar later = function() {\n\t\t\ttimeout = null;\n\t\t\tif (!immediate) func.apply(context, args);\n\t\t};\n\t\tvar callNow = immediate && !timeout;\n\t\tclearTimeout(timeout);\n\t\ttimeout = setTimeout(later, wait);\n\t\tif (callNow) func.apply(context, args);\n\t};\n};\n\nexport default debounce;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { motion } from 'framer-motion';\nimport debounce from '../utils/debounce';\n\nconst Underline = ({ refs, activeRoute, finishAnimating, animating }) => {\n  const [{ x, width }, setAttributes] = React.useState({\n    x: 0,\n    width: 0,\n  });\n\n  const updateAttributes = React.useCallback(() => {\n    if (refs && refs[activeRoute]) {\n      setAttributes({\n        x: refs[activeRoute].current.offsetLeft,\n        width: refs[activeRoute].current.getBoundingClientRect().width,\n      });\n    }\n  }, [activeRoute, refs])\n\n  // Update attributes if active route changes (or refs change)\n  React.useEffect(() => {\n    updateAttributes();\n  }, [activeRoute, refs, updateAttributes]);\n\n  // After window resize, recalculate\n  React.useEffect(() => {\n    const recalculateAttrs = debounce(() => {\n      updateAttributes();\n    }, 500);\n\n    window.addEventListener('resize', recalculateAttrs);\n    return () => {\n      window.removeEventListener('resize', recalculateAttrs);\n    };\n  });\n\n  return (\n    <motion.div\n      className=\"tabs-list__underline\"\n      animate={{\n        x,\n        width,\n      }}\n      style={{\n        opacity: animating ? 1 : 0,\n      }}\n      onAnimationComplete={finishAnimating}\n    />\n  );\n};\n\nUnderline.defaultProps = {\n  activeTabRef: undefined,\n}\n\nUnderline.propTypes = {\n  refs: PropTypes.objectOf(PropTypes.shape({\n    current: PropTypes.shape({\n      offsetLeft: PropTypes.number,\n      getBoundingClientRect: PropTypes.func,\n    }),\n  })),\n  previousRoute: PropTypes.string,\n  activeRoute: PropTypes.string,\n  finishAnimating: PropTypes.func.isRequired,\n  animating: PropTypes.bool.isRequired,\n};\n\nexport default Underline;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Switch, Route, Redirect, matchPath, useLocation } from 'react-router-dom';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport Tab from './tab';\nimport Underline from './underline';\n\nconst Tabs = ({ items }) => {\n  const [animating, setAnimating] = React.useState(false);\n\n  const tabRefs = items.reduce((acc, item) => {\n    acc[item.route] = React.createRef();\n    return acc;\n  }, {});\n\n  const location = useLocation();\n\n  // Find active path\n  const active = items.find((item) =>\n    matchPath(location.pathname, {\n      path: `/${item.route}`,\n      exact: true,\n    }),\n  );\n\n  const activeRoute = active && active.route;\n\n  return (\n    <React.Fragment>\n      <div className=\"tabs\">\n        <ul role=\"tablist\" aria-orientation=\"horizontal\" className=\"tabs-list\">\n          {items.map((item) => (\n            <Tab\n              key={item.route}\n              location={location}\n              item={item}\n              ref={tabRefs[item.route]}\n              active={activeRoute === item.route}\n              animating={animating}\n              startAnimating={() => setAnimating(true)}\n            />\n          ))}\n        </ul>\n        <Underline\n          refs={tabRefs}\n          activeRoute={activeRoute}\n          finishAnimating={() => setAnimating(false)}\n          animating={animating}\n        />\n      </div>\n      <AnimatePresence exitBeforeEnter>\n        <Switch location={location} key={location.pathname}>\n          {items.map((item) => (\n            <Route\n              key={item.route}\n              path={`/${item.route}`}\n              render={() => (\n                <motion.div\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                >\n                  {item.render()}\n                </motion.div>\n              )}\n            />\n          ))}\n          {/*\n            Need to wrap the redirect in a motion component with an \"exit\" defined\n            https://www.framer.com/api/motion/animate-presence/#animating-custom-components\n          */}\n          <Route\n            key=\"redirection\"\n            render={() => (\n              <motion.div exit={{ opacity: 0 }}>\n                <Redirect to={items[0] ? `/${items[0].route}` : '/'} />\n              </motion.div>\n            )}\n          />\n        </Switch>\n      </AnimatePresence>\n    </React.Fragment>\n  );\n};\n\nTabs.defaultProps = {\n  items: [],\n};\n\nTabs.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      route: PropTypes.route,\n    }),\n  ),\n};\n\nexport default Tabs;\n","import React from 'react';\nimport { HashRouter as Router } from 'react-router-dom';\nimport Tabs from './tabs/tabs';\nimport './App.css';\n\nconst App = () => (\n  <div className=\"wrapper\">\n    <Router>\n      <Tabs\n        items={[\n          {\n            name: 'Tab #1',\n            route: 'id1',\n            render: () => (\n              <p>\n                Depths burying snare value law merciful value snare society eternal-return decieve aversion.\n                Holiest virtues pious war depths noble inexpedient against endless ultimate. Merciful\n                disgust convictions grandeur abstract battle gains revaluation fearful inexpedient right\n                holiest faithful battle. Merciful depths decrepit intentions virtues salvation war ultimate.\n                Sea transvaluation virtues suicide battle against victorious.\n              </p>\n            )\n          },\n          {\n            name: 'Tab #2',\n            route: 'id2',\n            render: () => (\n              <p>\n                Ideal overcome free burying grandeur aversion. Dead morality self right superiority passion\n                virtues hope society play of snare grandeur. Good oneself burying law good ultimate burying.\n                Play justice snare holiest noble sea reason marvelous right.\n              </p>\n            )\n          },\n          {\n            name: 'Tab #3',\n            route: 'id3',\n            render: () => (\n              <p>\n                Inexpedient gains prejudice aversion pious snare noble ocean ocean overcome self ubermensch\n                prejudice philosophy. Ocean strong sea burying reason ultimate burying spirit. Pious christianity\n                decieve endless abstract decrepit abstract. Ocean burying depths evil horror suicide mountains\n                fearful depths christianity disgust gains horror. Self marvelous passion faith against grandeur.\n              </p>\n            )\n          }\n        ]}\n      />\n    </Router>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}